{    function selected_rbutton(rbuttons) {        for (var i = 0; i < rbuttons.children.length; i++)            if (rbuttons.children[i].value == true)                return i;    }    function myScript(thisObj) {        function myScript_buildUI(thisObj) {            var myPanel = (thisObj instanceof Panel) ? thisObj : new Window("palette", "My Panel Name", [0, 0, 220, 200]);            function myFocusFunction() {                if (this.text === this.text) {                    this.text = ""                }            }            function myBlurFunction() {                if (this.text === "") {                    this.text = this.text                }            }            myPanel.alignChildren = "fill";            var bt_produceScript = myPanel.add("button", undefined, "Produce Boxes");            var bt_combineScript = myPanel.add("button", undefined, "Combine Boxes");                                    var rowOButtons = myPanel.add("group");            var bt_imageScript = rowOButtons.add("button", undefined, "Add Images");            var bt_clearScript = rowOButtons.add("button", undefined, "Clear Comps");            var pan = myPanel.add("tabbedpanel");            pan.alignChildren = "fill";            pan.spacing = 10;            var fromTextBox = pan.add("tab", undefined, "From Text Box");            var fromScratch = pan.add("tab", undefined, "From Scratch");            fromTextBox.alignChildren = "left";            fromScratch.alignChildren = "left";            var pan1Setup = fromTextBox.add("panel");            var pan1Setup_scratch = fromScratch.add("panel");            //fromTextBox Stuff            pan1Setup.alignChildren = "fill";            pan1Setup.spacing = 10;            //var st_pointSize = pan1Setup.add("statictext", undefined, "Define Point Size");            //var et_pointSize = pan1Setup.add("edittext", undefined, "30");            var st_leadingSize = pan1Setup.add("statictext", undefined, "Define Leading Size");            var et_leadingSize = pan1Setup.add("edittext", undefined, "36");            //~ var st_numOfModuleLines = pan1Setup.add ("statictext", undefined, "Define Number of Module Lines");            //~ var et_numOfModuleLines = pan1Setup.add ("edittext", undefined, ".9");            var st_numberOfColumns = pan1Setup.add("statictext", undefined, "Define Number of Columns");            var et_numberOfColumns = pan1Setup.add("edittext", undefined, "2");            var st_numberOfRows = pan1Setup.add("statictext", undefined, "Define Number of Rows");            var et_numberOfRows = pan1Setup.add("edittext", undefined, "2");            //fromScratchStuff            pan1Setup_scratch.alignChildren = "fill";            pan1Setup_scratch.spacing = 10;            var st_boxWidth = pan1Setup_scratch.add("statictext", undefined, "Define Box Width");            var et_boxWidth = pan1Setup_scratch.add("edittext", undefined, "200");            var st_boxHeight = pan1Setup_scratch.add("statictext", undefined, "Define Box Height");            var et_boxHeight = pan1Setup_scratch.add("edittext", undefined, "200");            var st_leadingSize_s = pan1Setup_scratch.add("statictext", undefined, "Define Leading Size");            var et_leadingSize_s = pan1Setup_scratch.add("edittext", undefined, "30");            var st_numberOfColumns_s = pan1Setup_scratch.add("statictext", undefined, "Define Number of Columns");            var et_numberOfColumns_s = pan1Setup_scratch.add("edittext", undefined, "2");            var st_numberOfRows_s = pan1Setup_scratch.add("statictext", undefined, "Define Number of Rows");            var et_numberOfRows_s = pan1Setup_scratch.add("edittext", undefined, "2");            //et_getHoldTime.addEventListener("focus", function() {if (this.text ===this.text) {this.text=""}});            //et_myDictionaryText.addEventListener("blur", function() {if (this.text ==="") {this.text="[\n[0,[255,45]],\n[0,[298,90]],\n[0,[298,90]]\n\n]";}});            //et_holdTime.addEventListener("blur", function() {if (this.text ==="") {this.text=".9";}});            function mainScript() {                  app.beginUndoGroup("Create Boxes");                    var myItemCollection = app.project.items;                    var myMainComp = app.project.activeItem;                    var selectedLayers = myMainComp.selectedLayers;                    var mySelectedLayer = selectedLayers[0];                    //textDocument.boxTextSize                    var heightOfContentArea = 10000;                    var widthOfContentArea = 10000;                    if (pan.selection == fromTextBox) {                        //alert("from TextBox")                        //from text box processing code                        var myTextString = "v=thisLayer.sourceRectAtTime(time,true);\n[v.width,v.height];"                        mySelectedLayer.property("position").expression = myTextString;                        var textProp = mySelectedLayer.property("Source Text");                           var textDocument = textProp.value;                            var pointSize= textDocument.fontSize;                                                    //var pointSize = parseInt(et_pointSize.text);                        var leadingSize = parseInt(et_leadingSize.text);                        //var numOfModuleLines =parseInt(et_numOfModuleLines.text);                        //var numberOfColumns = 0;                        //var numberOfRows = 0;                            var numberOfColumns = Math.floor(parseInt(et_numberOfColumns.text));                        var numberOfRows = Math.floor(parseInt(et_numberOfRows.text));                        // var textBoundingSizeWidth = parseInt(prompt("TextBoundingSizeWith?"));                        var textBoundingSizeWidth = parseInt(mySelectedLayer.property("position").value[0]);                        var numberOfBoxesToCreate = numberOfColumns * numberOfRows;                        var moduleSizeY = parseInt(mySelectedLayer.property("position").value[1]);                        //~                 if (leadingSize> pointSize)                        //~                 {                        //~                  var moduleSizeY = parseInt(((numOfModuleLines-1)*leadingSize)+pointSize);                         //~                  }                        //~              else                        //~                   {                        //~                       var moduleSizeY = parseInt(((numOfModuleLines-1)*leadingSize)+leadingSize);                         //~                       }                        var heightOfContentArea = ((numberOfRows) * moduleSizeY) + (leadingSize * (numberOfRows - 1));                        var widthOfContentArea = (numberOfColumns * textBoundingSizeWidth) + ((numberOfColumns - 1) * leadingSize);                    } else {                        //alert("fromScratch");                        //from scratch code                        var textBoundingSizeWidth = parseInt(et_boxWidth.text);                        var moduleSizeY = parseInt(et_boxHeight.text);                        var leadingSize = parseInt(et_leadingSize_s.text);                        var numberOfColumns = Math.floor(parseInt(et_numberOfColumns_s.text));                        var numberOfRows = Math.floor(parseInt(et_numberOfRows_s.text));                        var numberOfBoxesToCreate = numberOfColumns * numberOfRows;                        // var textBoundingSizeWidth = parseInt(prompt("TextBoundingSizeWith?"));                        //var textBoundingSizeWidth =parseInt(mySelectedLayer.property("position").value[0]);                                //var moduleSizeY =parseInt(mySelectedLayer.property("position").value[1]);                        //~                 if (leadingSize> pointSize)                        //~                 {                        //~                  var moduleSizeY = parseInt(((numOfModuleLines-1)*leadingSize)+pointSize);                         //~                  }                        //~              else                        //~                   {                        //~                       var moduleSizeY = parseInt(((numOfModuleLines-1)*leadingSize)+leadingSize);                         //~                       }                        var heightOfContentArea = ((numberOfRows) * moduleSizeY) + (leadingSize * (numberOfRows - 1));                        var widthOfContentArea = (numberOfColumns * textBoundingSizeWidth) + ((numberOfColumns - 1) * leadingSize);                    }                    if (heightOfContentArea > myMainComp.height && widthOfContentArea > myMainComp.width) {                        alert("REDO settings. Height & width are over.")                    } else if (heightOfContentArea > myMainComp.height) {                        alert("REDO settings. Height is over.")                    } else if (widthOfContentArea > myMainComp.width) {                        alert("REDO settings. Width is over. ")                    } else { //do the major stuff                        var excessWidth = myMainComp.width - widthOfContentArea;                        var excessHeight = myMainComp.height - heightOfContentArea;                        var startPosition = [excessWidth * .5, excessHeight * .5];                        function getPosition(startPosition, index, leadingSize, textBoundingSizeWidth, numberOfColumns, moduleSizeY) {                            return startPosition + [(textBoundingSizeWidth + leadingSize) * (index % numberOfColumns), Math.floor(index / numberOfColumns) * (moduleSizeY + leadingSize)];                        }                        // CREATE NEEDED REFERENCES TO DO THEN DO STUFF WITH                        var compFolder = myItemCollection.addFolder("*ModuleFolder");                        //FOR THE NUMBER OF BOXES TO CREATE...CREATE A COMP...MAKE THE LAYER INSIDE THE COMP YAY BIG AND POSITIONED YAY...PLACE THOSE SIZED COMPS IN FOLDER                        for (dd = 0; dd < numberOfBoxesToCreate; dd++) {                            var compW = parseInt(textBoundingSizeWidth); // comp width                            var compH = parseInt(moduleSizeY); // comp height                            var compL = app.project.activeItem.frameRate; // comp length (seconds)                            var compRate = app.project.activeItem.frameRate; // comp frame rate                            var compBG = [48 / 255, 63 / 255, 84 / 255]; // comp background color                                                var myComp = myItemCollection.addComp('1', compW, compH,                                1, compL, compRate); //creating new comps of varying sizes and stuff                            myComp.parentFolder = compFolder;                            //alert(compFolder.numItems);                            myComp.bgColor = compBG;                            myComp.name = "Comp_" + (dd + 1);                            // POSITION AND STUFF OF THE LAYER INSIDE THE COMP                                      var myLayer = myComp.layers.addSolid(compBG, dd, myComp.width, myComp.height, 1, compL);                            myLayer.property("anchorPoint").setValue([0, 0]);                            myLayer.property("position").setValue([0, 0]);                        }                        // GET NUMBER OF COMPS IN NEW FOLDER                               var numInFolder = compFolder.numItems;                        var bugFixItemWorkAround = compFolder.item(1).name;                        // PUT THOSE NEW COMPS IN A MAIN COMP, WHICH IS ALREADY THE ACTIVE ITEM, AND SET THE RIGH POSITIONS                           for (ccg = 0; ccg < numberOfBoxesToCreate; ccg++) {                            //alert(cc+"_neededPause?_"+compFolder.item((ccg % numInFolder) + 1).name)                            var itemVar = parseInt((ccg % numInFolder) + 1);                            // var bugFixItemWorkAroundTest2= (compFolder.item(itemVar));                            var myLayerinComp = myMainComp.layers.add(compFolder.item(itemVar));                            myLayerinComp.moveToEnd();                            myLayerinComp.name = "Comp_" + (ccg + 1);                            myLayerinComp.property("anchorPoint").setValue([0, 0]);                            var myPos = getPosition(startPosition, ccg, leadingSize, textBoundingSizeWidth, numberOfColumns, moduleSizeY);                            myLayerinComp.property("position").setValue(myPos);                        }                        var myContentArea = myMainComp.layers.addSolid([200 / 255, 200 / 255, 200 / 255], "ContentArea", widthOfContentArea, heightOfContentArea, 1, compL);                        myContentArea.moveToEnd();                        myContentArea.locked = true;                        myContentArea.property("anchorPoint").setValue([0, 0]);                        myContentArea.property("position").setValue(startPosition);                        var myBack = myMainComp.layers.addSolid([255 / 255, 255 / 255, 255 / 255], "WhiteSolid", myMainComp.width, myMainComp.height, 1, compL);                        myBack.moveToEnd();                        myBack.locked = true;                        var folio = myMainComp.layers.addText("[1]");                        folio.property("anchorPoint").setValue([4, -leadingSize]);                        var folioPos = [0, leadingSize + moduleSizeY] + getPosition(startPosition, numInFolder - 1, leadingSize, textBoundingSizeWidth, numberOfColumns, moduleSizeY);                        folio.property("position").setValue(folioPos);                        if (pan.selection == fromTextBox) {                            mySelectedLayer.property("position").expression = "";                        }                    } //end of major else case  app.endUndoGroup();            } //END            function secondScript(){                                        //alert("cuedsecondscript");                            app.beginUndoGroup("Combine: GridSystem Addition");                            function tomiSort(array) {                                var unsorted = true                                while (unsorted) {                                    // Tracks whether any changes were made, changed to false on any swap                                    var complete = true                                    for (var i = 0; i < array.length - 1; i++) {                                        // Holds the value for determining whether to swap the current positions                                        var swap = false                                        var currentItem = array[i]                                        var nextItem = array[i + 1]                                        if (currentItem[1] == nextItem[1]) {                                            // The scores are the same, so sort by the time                                            if (currentItem[0] > nextItem[0]) {                                                swap = true                                            }                                        } else if (currentItem[1] > nextItem[1]) {                                            swap = true                                        }                                        if (swap) {                                            array[i] = nextItem                                            array[i + 1] = currentItem                                            complete = false                                        }                                    }                                    if (complete) {                                        unsorted = false                                    }                                }                                return array                            }                            function smallestMod(array) {                                var lowestArea = array[0].height * array[0].width;                                var lowestAreaIndex = 0;                                for (var ii = 1; ii < array.length - 1; ii++) {                                    var currentItem = array[ii];                                    if (currentItem.height * currentItem.width < lowestArea) {                                        lowestAreaIndex = ii;                                    }                                }                                return lowestAreaIndex;                            }                            function topLeftPick(array) {                                var theX = array[0].property("position").value[0];                                var theY = array[0].property("position").value[1];                                var topLeftPickIndex = 0;                                for (var ii = 1; ii < array.length; ii++) {                                    var currentItem = array[ii];                                    if (currentItem.property("position").value[0] < theX) {                                                                                                                                                                topLeftPickIndex = ii;                                        theX = array[ii].property("position").value[0];                                        theY = array[ii].property("position").value[1];                                                                                                                    }                                else                                {                                     if (currentItem.property("position").value[0] == theX && currentItem.property("position").value[1] < theY) {                                        topLeftPickIndex = ii;                                        theX = array[ii].property("position").value[0];                                        theY = array[ii].property("position").value[1];                                         }                                                                                                                                                }                                                                                                                                }                                return topLeftPickIndex;                            }                            function getMostRightBottom(array) {                                                                var logRightMostPoint=0;                                var logBottomMostPoint=0;                                for (var ii = 0; ii <array.length; ii++) {                                    var currentItem = array[ii];                                    var challengerXX= currentItem.property("position").value[0]+currentItem.width;                                    var challengerYY= currentItem.property("position").value[1]+currentItem.height;                                                                                                            if (challengerXX >logRightMostPoint) {                                        logRightMostPoint=challengerXX;                                    }                                      if (challengerYY >logBottomMostPoint) {                                        logBottomMostPoint=challengerYY;                                                                                                        }                                                                                                                                                                }                                return [logRightMostPoint,logBottomMostPoint];                            }                                                                                                                //alert("registedClick");                                                        var myItemCollection = app.project.items;                            var myMainComp = app.project.activeItem;                            var selectedLayers = myMainComp.selectedLayers;                            //mySelectedPositionss = [];                            //for (m = 0; m < selectedLayers.length; m++) {                           //     mySelectedPositionss.push([parseInt(selectedLayers[m].property("position").value[0]), parseInt(selectedLayers[m].property("position").value[1])]);                           // }                            //alert("registedClick 2");                            //var mySelectedPositions = tomiSort(mySelectedPositionss);                            // alert(mySelectedPositions.toString());                                                        //MASSIVE CHANGE iN MARCH OF 2019 BELOW                            var thetopLeftPickIndex = topLeftPick(selectedLayers);                            var myRightBottomFigure=getMostRightBottom(selectedLayers);                                                                                    var areaStartPoint = [selectedLayers[thetopLeftPickIndex].property("position").value[0],selectedLayers[thetopLeftPickIndex].property("position").value[1]];                            var area = [Math.abs(myRightBottomFigure[0]-areaStartPoint[0]),Math.abs(myRightBottomFigure[1]-areaStartPoint[1])];                            var compFolder = selectedLayers[0].source.parentFolder;                            var myMainComp = app.project.activeItem;                            //FOR THE NUMBER OF BOXES TO CREATE...CREATE A COMP...MAKE THE LAYER INSIDE THE COMP YAY BIG AND POSITIONED YAY...PLACE THOSE SIZED COMPS IN FOLDER                            var compW = parseInt(area[0]); // comp width                            var compH = parseInt(area[1]); // comp height                            var compL = 60; // comp length (seconds)                            var compRate = app.project.activeItem.frameRate; // comp frame rate                            var compBG = [48 / 255, 63 / 255, 84 / 255]; // comp background color                                                var myComp = myItemCollection.addComp('1', compW, compH, 1, compL, compRate); //creating new comps of varying sizes and stuff                            myComp.parentFolder = compFolder;                            myComp.bgColor = compBG;                            myComp.name = "ComboComp";                            // POSITION AND STUFF OF THE LAYER INSIDE THE COMP                                      var myLayer = myComp.layers.addSolid(compBG, "myComboComp", myComp.width, myComp.height, 1, compL);                            myLayer.property("anchorPoint").setValue([0, 0]);                            myLayer.property("position").setValue([0, 0]);                            // PUT THOSE NEW COMPS IN A MAIN COMP, WHICH IS ALREADY THE ACTIVE ITEM, AND SET THE RIGH POSITIONS                               for (cc = 0; cc < 1; cc++) {                                var myLayerinComp = myMainComp.layers.add(myComp);                                myLayerinComp.name = "ComboComp";                                myLayerinComp.property("anchorPoint").setValue([0, 0]);                                myLayerinComp.property("position").setValue(areaStartPoint);                            }                            //below is the deletng code                            for (m = 0; m < selectedLayers.length; m++) {                                var myDesiredComp = selectedLayers[m].source;                                myDesiredComp.remove();                            }                            app.endUndoGroup();   //end of Combine Script               }              function thirdScript(){                                 app.beginUndoGroup("Add Images");                                    function shuffle(array)                                    {                                            var counter = array.length;                                            var temp = counter;                                            var index = temp; // While there are elements in the array                                            while (counter > 0)                                            { // Pick a random index                                                    index = Math.floor(generateRandomNumber() *                                                            counter); // Decrease counter by 1                                                    counter--; // And swap the last element with it                                                    temp = array[counter];                                                    array[counter] = array[index];                                                    array[index] = temp;                                            }                                            return array;                                    }                                                                                                                                     var easeIn = new KeyframeEase(0, 16.6667);                                     var easeOut = new KeyframeEase(0, 68.83261);                                     var easeIn2 = new KeyframeEase(0, 77.8464);                                     var easeOut2 = new KeyframeEase(0, 16.6667);                            myExp= 'd=comp("GoTime 02").layer(thisComp.name).marker.key(1).time;\ntransform.position.valueAtTime(time-d);';                            //alert (myArray[myArray.length-1])                            var yourFolderName="";                                                                                                                                            //while (yourFolderName=="")                            //{                                                                    yourFolderName = prompt(                                            "Please enter the name of the folder you want to grab images from");                                                                        var folderName = yourFolderName.toLowerCase(); // name of item you're looking for                                            var myFolder = null;                                                                                                                                    for (var i = 1; i <= app.project.numItems; i++)                                            {                                                    if ((app.project.item(i).name.toLowerCase() == folderName))                                                    {                                                            myFolder = app.project.item(i);                                                            break;                                                    }                                            } //find the asset folder name you define and make it the variable "myFolder"                                                                                                                             if (myFolder != null)                                            {                                                    var numInFolder = myFolder.numItems;                                                                                               }                                            else                                            {                                                    alert("Can't find comp '" + folderName + "'");                                                    yourFolderName="";                                            } //using the nubmer of rows and columns and other comp secs, we make the griditem comps here                                                                     //}                                                                                                                                                                                                            if (myFolder != null)                                            {// THIS is where all the good stuff happens if the folder name matches                                                                            var tally =0; // begin the tally used not to repeat images so much                                                     var myChoice = [];                                                    for (xu = 0; xu < numInFolder; xu++) //for the number of items in the folder....create an array of choices so we eventually don't reuse the same images                                                    {                                                            myChoice[xu] = xu;                                                    }                                                    myChoice = shuffle(myChoice);                              var myComp = app.project.activeItem;                            var selectedLayers = myComp.selectedLayers;                            for (m = 0; m<selectedLayers.length; m++)                              {                                  var howFast =Math.round(generateRandomNumber()*100);                                    var myDesiredComp=selectedLayers[m].source;                                                                                       var myLayer = myDesiredComp.layers.add(myFolder.item(parseInt(parseInt((myChoice[                                                                    tally%                                                            (numInFolder)])  + 1)))); //we're choosing through our choices array...so we don't get a repeat images unless we have too many grid items and thus have to repeat the first couple                            //alert(myChoice[m%numInFolder]  + 1);                                                       myLayer.property("anchorPoint").setValue([0,0]);                                                                            myLayer.property("position").setValue([0,0]);                                                  tally++;                                                                                                    var x = myLayer.width;                                                    var y = myLayer.height; //getting the size of the original image asset                                                    var myVal = [100, 100];                                                                                                                                if (3<9)                                                                //if (x<myDesiredComp.width || y<myDesiredComp.height)                                                                {                                                                var xx = myDesiredComp.width / x;                                                                var yy = myDesiredComp.height / y; //getting the size of the comp                                                                if (xx >= yy)                                                                {                                                                        var s = (xx) * 100;                                                                        myVal = [s, s];                                                                }                                                                else                                                                {                                                                        s = (yy) * 100;                                                                        myVal = [s, s];                                                                } // proper scaling to fit                                                            }                                                                                                            myLayer.property("scale").setValue(myVal);                                                                                                   myLayer.moveToBeginning();                            }                            app.endUndoGroup();}//deletethis if stuff goes crazy...and the if statement above              };                                                                    function fourthScript(){                                      app.beginUndoGroup("Clear Comps");                        var myComp = app.project.activeItem;                        var selectedLayers = myComp.selectedLayers;                        for (m = 0; m<selectedLayers.length; m++)                          {                                var myDesiredComp=selectedLayers[m].source;                                                                for (t=1; t<=myDesiredComp.numLayers; t++)                                    {                                                                              var theChosenLayer = myDesiredComp.layer(t);                                                theChosenLayer.remove();                                                                                }                        }                        app.endUndoGroup();                            };            bt_produceScript.onClick = mainScript;            bt_combineScript.onClick = secondScript;            bt_imageScript.onClick = thirdScript;            bt_clearScript.onClick = fourthScript;            // DropDownList default selection            //myPanel.grp.myDropDownList.selection = 2;//Item index starts at 0            //Setup panel sizing and make panel resizable            myPanel.layout.layout(true);            //myPanel.pan1.minimumSize = myPanel.pan1.size;            myPanel.layout.resize();            myPanel.onResizing = myPanel.onResize = function() {                this.layout.resize();            }            return myPanel;        }        var myScriptPal = myScript_buildUI(thisObj);        if ((myScriptPal != null) && (myScriptPal instanceof Window)) {            myScriptPal.center();            myScriptPal.show();        }    }    myScript(this);}